⚙️ 1. Tahap Awal: Persiapan Sistem

🔸 1.1. Update & Upgrade

sudo apt update && sudo apt full-upgrade -y
sudo apt autoremove -y

🔸 1.2. Set Hostname & Timezone

sudo hostnamectl set-hostname webserver-01
sudo timedatectl set-timezone Asia/Jakarta

🔸 1.3. Tambahkan User Non-Root

adduser devops
usermod -aG sudo devops

🔸 1.4. Setup SSH Security

sudo nano /etc/ssh/sshd_config


Ubah / pastikan:

PermitRootLogin no
PasswordAuthentication no
PubkeyAuthentication yes


Lalu:

sudo systemctl restart ssh


Tambahkan kunci SSH publik ke user devops:

mkdir -p ~/.ssh && chmod 700 ~/.ssh
nano ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys

🔒 2. Tahap Keamanan
🔸 2.1. Install & Konfigurasi Firewall (UFW)

sudo apt install ufw -y
sudo ufw allow OpenSSH
sudo ufw allow http
sudo ufw allow https
sudo ufw enable
sudo ufw status

🔸 2.2. Fail2Ban (Brute-force protection)

sudo apt install fail2ban -y
sudo systemctl enable fail2ban --now

🔸 2.3. Optional: Enable automatic security updates

sudo apt install unattended-upgrades apt-listchanges -y
sudo dpkg-reconfigure -plow unattended-upgrades

🌐 3. Tahap Instalasi Web Stack

Pilih sesuai kebutuhan:

🔸 Opsi A — LEMP (Nginx + PHP + MariaDB)

sudo apt install nginx php-fpm php-mysql mariadb-server -y
sudo systemctl enable nginx mariadb php8.1-fpm --now

🔸 Opsi B — LAMP (Apache + PHP + MySQL)

sudo apt install apache2 php libapache2-mod-php php-mysql mysql-server -y
sudo systemctl enable apache2 mysql --now

🔸 Uji Web Server

sudo systemctl status nginx
curl http://localhost

🗄️ 4. Database Setup (Contoh: MariaDB)

sudo mysql_secure_installation
sudo mysql -u root -p


Buat database dan user:

CREATE DATABASE webdb;
CREATE USER 'webuser'@'localhost' IDENTIFIED BY 'StrongPass123!';
GRANT ALL PRIVILEGES ON webdb.* TO 'webuser'@'localhost';
FLUSH PRIVILEGES;
EXIT;

📂 5. Deploy Aplikasi Web

🔸 5.1. Struktur Direktori

sudo mkdir -p /var/www/mywebsite/public
sudo chown -R devops:www-data /var/www/mywebsite
sudo chmod -R 755 /var/www/mywebsite

🔸 5.2. Nginx Virtual Host (contoh)

sudo nano /etc/nginx/sites-available/mywebsite.conf


Isi:

server {
    listen 80;
    server_name example.com www.example.com;

    root /var/www/mywebsite/public;
    index index.php index.html;

    access_log /var/log/nginx/mywebsite_access.log;
    error_log /var/log/nginx/mywebsite_error.log;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php8.1-fpm.sock;
    }

    location ~ /\.ht {
        deny all;
    }
}


Aktifkan site dan reload:

sudo ln -s /etc/nginx/sites-available/mywebsite.conf /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx

🔐 6. HTTPS / SSL Configuration (Let’s Encrypt)

Install Certbot:

sudo apt install certbot python3-certbot-nginx -y


Issue certificate:

sudo certbot --nginx -d example.com -d www.example.com
sudo systemctl enable certbot.timer


Test auto-renew:

sudo certbot renew --dry-run

🧩 7. CI/CD & Deployment Workflow (Opsional tapi direkomendasikan)

Gunakan Git untuk versioning:

sudo apt install git -y
git clone https://github.com/username/mywebsite.git /var/www/mywebsite


Gunakan Git Hooks atau GitHub Actions untuk auto-deploy ke server.

Pastikan direktori /var/www/mywebsite dimiliki oleh www-data.

📊 8. Monitoring & Logging

Aktifkan nginx access/error logs.

Gunakan tools:

htop, journalctl, systemctl status

logrotate untuk rotasi log

Opsional: install Netdata atau Prometheus node exporter.

🧼 9. Hardening Tambahan (Opsional tapi dianjurkan)

Nonaktifkan service yang tidak digunakan:

sudo systemctl disable bluetooth cups avahi-daemon


Gunakan AppArmor (sudah aktif di Ubuntu)

Jalankan audit:

sudo apt install lynis -y
sudo lynis audit system

🚀 10. Publikasi Web

Pastikan DNS domain (A record) mengarah ke IP server.

Uji akses di browser:
👉 https://example.com

Verifikasi sertifikat SSL valid dan redirect HTTPS aktif.

Monitor uptime & performa dengan uptime, ping, atau tools seperti UptimeRobot.
